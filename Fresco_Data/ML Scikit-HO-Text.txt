{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pre Processing\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn.datasets as skd\n",
    "import sklearn.preprocessing as skp\n",
    "import numpy as np\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "#loading data\n",
    "iris = skd.load_iris()\n",
    "\n",
    "#Normalizing using L2\n",
    "normalizer = skp.Normalizer(norm='l2').fit(iris.data)\n",
    "iris_normalized = normalizer.transform(iris.data)\n",
    "print(iris_normalized.mean(axis = 0))\n",
    "\n",
    "#OneHotEncoding\n",
    "enc = skp.OneHotEncoder()\n",
    "iris_target_onehot = enc.fit_transform(iris.target.reshape(-1, 1))\n",
    "print(iris_target_onehot.toarray()[[0,50,100]])\n",
    "\n",
    "#fill nan\n",
    "iris.data[:50,:] = np.nan\n",
    "\n",
    "#Imputation\n",
    "imputer = SimpleImputer(missing_values=np.nan, strategy='mean')\n",
    "imputer = imputer.fit(iris.data)\n",
    "iris_imputed = imputer.transform(iris.data)\n",
    "print(iris_imputed.mean(axis = 0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hands-On KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn.datasets as skd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "#loading data\n",
    "iris = skd.load_iris()\n",
    "\n",
    "#Spliting data\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(iris.data\n",
    "                                                    , iris.target,stratify=iris.target,\n",
    "                                                     random_state=30)\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "\n",
    "#Model Creation\n",
    "knn_classifier = KNeighborsClassifier()   \n",
    "\n",
    "knn_classifier = knn_classifier.fit(X_train, Y_train)\n",
    "\n",
    "print(knn_classifier.score(X_train,Y_train))\n",
    "print(knn_classifier.score(X_test,Y_test))\n",
    "l = []\n",
    "#Ranging n_neighbours values from 3 - 10\n",
    "for i in range(3,11):\n",
    "  knn_classifier = KNeighborsClassifier(n_neighbors = i)\n",
    "  knn_classifier = knn_classifier.fit(X_train, Y_train)\n",
    "  l.append(knn_classifier.score(X_train,Y_train))\n",
    "print(l.index(max(l)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Decision Tree - Hands-On"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn.datasets as skd\n",
    "import sklearn.tree as tree\n",
    "import sklearn.preprocessing as skp\n",
    "from sklearn.model_selection import train_test_split\n",
    "import numpy as np\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "np.random.seed(100)\n",
    "boston = skd.load_boston()\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(boston.data\n",
    "                                                    , boston.target,random_state=30)\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "\n",
    "dt  = tree.DecisionTreeRegressor()\n",
    "dt_reg = dt.fit(X_train,Y_train)\n",
    "\n",
    "print(dt_reg.score(X_train,Y_train))\n",
    "print(dt_reg.score(X_test,Y_test))\n",
    "\n",
    "print(dt_reg.predict(X_test[0:2]))\n",
    "\n",
    "l=[]\n",
    "for i in range(2,6):\n",
    "  dt_classifier = tree.DecisionTreeRegressor(max_depth = i)\n",
    "  dt_classifier = dt_classifier.fit(X_train, Y_train)\n",
    "  l.append(dt_classifier.score(X_train,Y_train))\n",
    "print(l.index(max(l)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hands-On - Ensemble"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn.datasets as sd\n",
    "import sklearn.model_selection as sms\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "import sklearn.ensemble as se\n",
    "np.random.seed(100)\n",
    "\n",
    "boston = sd.load_boston()\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(boston.data, boston.target, random_state=30)\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "\n",
    "maxDepth = [3,4,5]\n",
    "nEstimators = [50,100,200]\n",
    "acc = []\n",
    "\n",
    "rf = se.RandomForestRegressor()\n",
    "rf_reg = rf.fit(X_train, Y_train)\n",
    "print(rf.score(X_train,Y_train))\n",
    "print(rf.score(X_test,Y_test))\n",
    "print(tuple(rf_reg.predict(X_test[0:2])))\n",
    "\n",
    "for i in range(0,3):\n",
    "  rf = se.RandomForestRegressor(n_estimators = nEstimators[i],max_depth = maxDepth[i])\n",
    "  rf_reg = rf.fit(X_train, Y_train)\n",
    "  acc.append(rf.score(X_train,Y_train))\n",
    "ind = acc.index(max(acc))\n",
    "print((maxDepth[ind],nEstimators[ind]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hands-On - SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1347, 64)\n",
      "(450, 64)\n",
      "0.9822222222222222\n",
      "0.9733333333333334\n"
     ]
    }
   ],
   "source": [
    "import sklearn.datasets as sd\n",
    "import sklearn.preprocessing as skp\n",
    "import sklearn.model_selection as sms\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "import sklearn.svm as ssvm\n",
    "np.random.seed(100)\n",
    "\n",
    "digits = sd.load_digits()\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(digits.data, digits.target, \n",
    "                              random_state=30, stratify=digits.target)\n",
    "print(X_train.shape)\n",
    "print(X_test.shape)\n",
    "\n",
    "svm = ssvm.SVC()\n",
    "svm_clf = svm.fit(X_train, Y_train)\n",
    "print(svm_clf.score(X_test,Y_test))\n",
    "\n",
    "\n",
    "\n",
    "standardizer = skp.StandardScaler()\n",
    "standardizer = standardizer.fit(digits.data)\n",
    "digits_standardized = standardizer.transform(digits.data)\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(digits_standardized, \n",
    "                      digits.target, random_state=30, stratify=digits.target)\n",
    "svm_clf2 = ssvm.SVC().fit(X_train, Y_train)\n",
    "print(svm_clf2.score(X_test,Y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hands-On - Clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import metrics\n",
    "import sklearn.datasets as skd\n",
    "from sklearn.cluster import KMeans, AgglomerativeClustering, AffinityPropagation\n",
    "\n",
    "iris = skd.load_iris()\n",
    "km = KMeans(n_clusters=3)\n",
    "km_cls = km.fit(iris.data)\n",
    "print(metrics.homogeneity_score(km_cls.predict(iris.data), iris.target))\n",
    "\n",
    "\n",
    "am = AgglomerativeClustering (n_clusters=3)\n",
    "agg_cls = am.fit(iris.data)\n",
    "print(metrics.homogeneity_score(agg_cls.fit_predict(iris.data), iris.target))\n",
    "\n",
    "af = AffinityPropagation()\n",
    "af_cls = af.fit(iris.data)\n",
    "print(metrics.homogeneity_score(af_cls.predict(iris.data), iris.target))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
